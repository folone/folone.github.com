---
layout: post
title: Статически типизированный джаваскрипт.
comments: true
categories: 
- javascript
- haskell
- fp
- roy
---

Каждый раз начиная новый проект под веб, передо мной стоит проблема выбора стека технологий. Если с сервер-сайд технологиями я некоторое время тому определился более-менее (планирую поменять "lift":http://liftweb.net/ на "play":http://scala.playframework.org/, но это такие мелочи), то UI -- это каждый раз компромис. Так хочется статически-типизированный язык. Тем не менее, с вариантами вроде GWT проблем во время дебага не оберёшься.

На новом проекте я наконец решил заюзать что-нибудь новое. После некоторого "ресёрча":http://altjs.org/ я для себя выбрал "Roy":http://roy.brianmckenna.org/. Уверен, с этим выбором у меня будет связано множество расстройств. Тем не менее, статическая типизация, синтаксис, похожий на хаскелль, паттерн матчинг, do-нотация, вывод типов на основе алгоритма "Хиндли-Милнера":http://en.wikipedia.org/wiki/Hindley%E2%80%93Milner взяли своё.

Так как язык очень молодой, пришлось делать кучу периферийной работы:
Первым, что я сделал -- на скорую руку склепал "roy-mode":https://github.com/folone/roy-mode. Делал на основе "generic-mode":http://www.emacswiki.org/emacs/GenericMode, что оказалось весьма простым занятием:

<script src="https://gist.github.com/1447544.js?file=gistfile1.el"></script>

Непонятными тут можгут показаться разве что строки вида @"\\<\\(e\\(?:mpty\\|ven\\)\\|f\\(?:ilter\\|lip\\|oldl\\)\\|head\\|id\\|l..."@. Это регулярные выражения, которые весьма просто получаются с помощью функции "regexp-opt":http://www.emacswiki.org/emacs/RegexpOpt (тут они просто вставлены в код по причине того, что в туториалах пишут, что так должно работать быстрей).

После того как я обзавёлся каким-никаким методом ввода кода, пришло время автоматизировать компиляцию этого самого кода. Так как сборка на наших проектах производится мейвеном, был быстренько запилен "плагин":https://github.com/folone/roy-maven-plugin. Благодаря пакету "@scala.sys.process@":http://www.scala-lang.org/archives/downloads/distrib/files/nightly/docs/library/scala/sys/process/ProcessBuilder.html, включающему в себя удобный DSL для описания shell-команд, код получился весьма небольшим.
