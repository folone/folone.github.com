---
layout: fullwidth
title: Recursion Schemes, a Field Guid Guide to Recursion Schemes, a Field Guide to ...
comments: true
is: post
categories: 
- resursion
- cheat sheet
- fp
---
<p align="right">Морфизм (стрелка) — в общем смысле преобразование любого рода из одного объекта категории в другой.</p>

С целью разобраться, составил такую вот табличку. Референсом служила "вот эта таблица":http://comonad.com/reader/2009/recursion-schemes/ и вот "этот проект":http://hackage.haskell.org/package/recursion-schemes. Ну и вообще "бложек":http://comonad.com/reader/ Эдварда Кметта, человека и парахода.
Зна́ком вопроса помечены определения, в которых я ну совсем не уверен и не осилил. По мере понимания, пост будет апдейтиться. Буду весьма благодарен дополнениям, поправкам, другим примерам, рекомендациям, чего бы почитать по теме (инбифо "Functional Programming with Bananas, Lenses, Envelopes and Barbed Wire":http://research.microsoft.com/~emeijer/Papers/fpca91.pdf).

table{border:1px solid black}.
{background:#ddd}.|\4=.Folds|
|_.Схема|_.Код|_.Описание|_.Краткий пример|
|"катаморфизм":http://en.wikipedia.org/wiki/Catamorphism|"Cata":https://github.com/ekmett/recursion-schemes/blob/master/Data/Functor/Foldable.hs#L94|обобщение свёртки списков на произвольные алгебраические типы данных, от греч. κατά = вниз, проверочное слово -- катастрофа|@foldr@|
|"параморфизм":http://en.wikipedia.org/wiki/Paramorphism|"Para":https://github.com/ekmett/recursion-schemes/blob/master/Data/Functor/Foldable.hs#L99|свёртка списка при помощи примитивной рекурсии, от греч. παρά = вместе, “eats its argument and keeps it too”|@dropWhile@|
|"зигоморфизм":http://www.iis.sinica.edu.tw/~scm/2010/functional-pearl-maximally-dense-segments/|"Zygo":https://github.com/ekmett/recursion-schemes/blob/master/Data/Functor/Foldable.hs#L363|свёртка списка при помощи вспомогательной функции, являющейся катаморфизмом, взаимная рекурсия||
|хистоморфизм|"Histo":https://github.com/ekmett/recursion-schemes/blob/master/Data/Functor/Foldable.hs#L399|свёрка списка на основе предыдущих вызовов (на каждом шаге доступ к результатам, полученным на предыдущих шагах)||
|"препроморфизм":http://wwwhome.cs.utwente.nl/~fokkinga/#detail_0000003532|"Prepro":https://github.com/ekmett/recursion-schemes/blob/master/Data/Functor/Foldable.hs#L106| свёртка списка после последовательного применения натурального преобразования, обобщённый катаморфизм||
{background:#ddd}.|\4=.Unfolds|
|_.Схема|_.Код|_.Описание|_.Краткий пример|
|"анаморфизм":http://en.wikipedia.org/wiki/Anamorphism|"Ana":https://github.com/ekmett/recursion-schemes/blob/master/Data/Functor/Foldable.hs#L132|обобщение разворачивания списков на произвольные алгебраические типы данных, от греч. ἀνά = вверх, проверочное слово -- анаболизм|@unfold@|
|"апоморфизм":http://en.wikipedia.org/wiki/Apomorphism|"Apo":https://github.com/ekmett/recursion-schemes/blob/master/Data/Functor/Foldable.hs#L138|"корекурсия":http://ru.wikipedia.org/wiki/%D0%9A%D0%BE%D1%80%D0%B5%D0%BA%D1%83%D1%80%D1%81%D0%B8%D1%8F . собирается список по одному уровню за итерацию|@zip, iterate@|
|"футуморфизм":http://www.mii.lt/informatica/pdf/INFO141.pdf|"Futu":https://github.com/ekmett/recursion-schemes/blob/master/Data/Functor/Foldable.hs#L245|собирается несколько уровней за одну итерацию (?)||
|постпроморфизм|"Postpro":https://github.com/ekmett/recursion-schemes/blob/master/Data/Functor/Foldable.hs#L142|разворачивается список и последовательно применяется натуральное преобразование (?)||
{background:#ddd}.|\4=.Refolds|
|_.Схема|_.Код|_.Описание|_.Краткий пример|
|"хиломорфизм":http://en.wikipedia.org/wiki/Hylomorphism_(computer_science)|"Hylo":https://github.com/ekmett/recursion-schemes/blob/master/Data/Functor/Foldable.hs#L160|анаморфизм + катаморфизм, от греч. ὑλο = материя|@fact n = product [1..n]@|
|"хрономорфизм":http://comonad.com/reader/2008/time-for-chronomorphisms/|"Chrono":http://comonad.com/haskell/category-extras/src/Control/Morphism/Chrono.hs|футуморфизм + хистоморфизм (?)||
|синхрономорфизм|"Synchro":http://comonad.com/haskell/category-extras/src/Control/Morphism/Synchro.hs|высокоуровневое преобразование между двумя структурами, которое использует третью структуру для получения промежуточных данных (?)||
|экзоморфизм|"Exo":http://comonad.com/haskell/category-extras/src/Control/Morphism/Exo.hs|высокоуровневое преобразование между структурами из триалгебры в биалгебру (?)||
|метаморфизм|"Erwig":http://comonad.com/haskell/category-extras/src/Control/Morphism/Meta/Erwig.hs|хиломорфизм, выраженный в терминах биалгебры (?)||
|метаморфизм|"Gibbons":http://comonad.com/haskell/category-extras/src/Control/Morphism/Meta/Gibbons.hs|@fold . unfold@ изменение репрезентации (?)||
|динаморфизм|"Dyna":http://comonad.com/haskell/category-extras/src/Control/Morphism/Dyna.hs|анаморфизм + хистоморфизм (?)||
|"Elgot алгебра":http://arxiv.org/abs/cs/0609040|"Elgot":https://github.com/ekmett/recursion-schemes/blob/master/Data/Functor/Foldable.hs#L423|во время fold'а может остановиться (?)||
|"Elgot коалгебра":http://comonad.com/reader/2008/elgot-coalgebras/|"CoElgot":hhttps://github.com/ekmett/recursion-schemes/blob/master/Data/Functor/Foldable.hs#L427|во время unfold'а может остановиться (?)||

Ну и легендарный "зигохистоморфный препроморфизм":http://www.haskell.org/haskellwiki/Zygohistomorphic_prepromorphisms ("код":https://github.com/ekmett/recursion-schemes/blob/master/Data/Functor/Foldable.hs#L433). Сам Кметт даёт некоторые объяснения в "этом сообщении":http://haskell.1045720.n5.nabble.com/Master-s-thesis-topic-sought-td3142012.html#a3142015.

Бонусом -- вот такая вот "диаграмма свёрток":http://cale.yi.org/share/Folds.svg.
