---
layout: fullwidth
title: Recursion Schemes, a Field Guide to Recursion Schemes, a Field Guide to ...
comments: true
is: post
categories: 
- resursion
- cheat sheet
- fp
---
<p align="right">Морфизм (стрелка) — в общем смысле преобразование любого рода из одного объекта категории в другой.</p>

Пытаюсь осилить "Functional Programming with Bananas, Lenses, Envelopes and Barbed Wire":http://research.microsoft.com/~emeijer/Papers/fpca91.pdf. В процессе составил такую вот табличку. Референсом служила "вот эта таблица":http://comonad.com/reader/2009/recursion-schemes/ и вот "этот проект":http://hackage.haskell.org/package/recursion-schemes. Ну и вообще "бложек":http://comonad.com/reader/ Эдварда Кметта, человека и парахода.
Зна́ком вопроса помечены определения, в которых я ну совсем не уверен и не осилил. По мере прочтения и понимания, таблица будет апдейтиться. Буду весьма благодарен дополнениям, поправкам, другим примерам и рекомендациям, чего бы почитать по теме.

table{border:1px solid black}.
{background:#ddd}.|\4=.Folds|
|_.Схема|_.Код|{width:50%}.*Описание*|_.Краткий пример|
|"катаморфизм":http://en.wikipedia.org/wiki/Catamorphism|"Cata":https://github.com/ekmett/recursion-schemes/blob/master/Data/Functor/Foldable.hs#L94|обобщение свёртки структур на произвольные алгебраические типы данных, от греч. κατά = вниз, проверочное слово -- катастрофа|@foldr@|
|"параморфизм":http://en.wikipedia.org/wiki/Paramorphism|"Para":https://github.com/ekmett/recursion-schemes/blob/master/Data/Functor/Foldable.hs#L99|свёртка структуры при помощи примитивной рекурсии, от греч. παρά = вместе, “eats its argument and keeps it too”|@dropWhile@|
|"зигоморфизм":http://www.iis.sinica.edu.tw/~scm/2010/functional-pearl-maximally-dense-segments/|"Zygo":https://github.com/ekmett/recursion-schemes/blob/master/Data/Functor/Foldable.hs#L363|свёртка структуры при помощи вспомогательной функции, являющейся катаморфизмом, взаимная рекурсия||
|"хистоморфизм":http://cs.ioc.ee/~tarmo/papers/inf.ps.gz|"Histo":https://github.com/ekmett/recursion-schemes/blob/master/Data/Functor/Foldable.hs#L399|свёртка структуры на основе предыдущих вызовов (на каждом шаге доступ к результатам, полученным на предыдущих шагах), "аннотирует" каждый следующий элемент структуры результатом, полученным из предыдущих элементов|@scanl@<span style="color:red;">(?)</span>|
|"препроморфизм":http://wwwhome.cs.utwente.nl/~fokkinga/#detail_0000003532|"Prepro":https://github.com/ekmett/recursion-schemes/blob/master/Data/Functor/Foldable.hs#L106| свёртка структуры после последовательного применения натурального преобразования||
{background:#ddd}.|\4=.Unfolds|
|_.Схема|_.Код|_.Описание|_.Краткий пример|
|"анаморфизм":http://en.wikipedia.org/wiki/Anamorphism|"Ana":https://github.com/ekmett/recursion-schemes/blob/master/Data/Functor/Foldable.hs#L132|обобщение разворачивания структур на произвольные алгебраические типы данных, от греч. ἀνά = вверх, проверочное слово -- анаболизм|@unfold@|
|"апоморфизм":http://en.wikipedia.org/wiki/Apomorphism|"Apo":https://github.com/ekmett/recursion-schemes/blob/master/Data/Functor/Foldable.hs#L138|примитивная "корекурсия":http://ru.wikipedia.org/wiki/%D0%9A%D0%BE%D1%80%D0%B5%D0%BA%D1%83%D1%80%D1%81%D0%B8%D1%8F. собирается
структура по одному уровню за итерацию, от греч. ἀπό = отдельно|@zip, iterate@|
|"футуморфизм":http://www.mii.lt/informatica/pdf/INFO141.pdf|"Futu":https://github.com/ekmett/recursion-schemes/blob/master/Data/Functor/Foldable.hs#L245|собирается несколько уровней за одну итерацию <span style="color:red;">(?)</span>||
|постпроморфизм|"Postpro":https://github.com/ekmett/recursion-schemes/blob/master/Data/Functor/Foldable.hs#L142|разворачивается структура и последовательно применяется натуральное преобразование <span style="color:red;">(?)</span>||
{background:#ddd}.|\4=.Refolds|
|_.Схема|_.Код|_.Описание|_.Краткий пример|
|"хиломорфизм":http://en.wikipedia.org/wiki/Hylomorphism_(computer_science)|"Hylo":https://github.com/ekmett/recursion-schemes/blob/master/Data/Functor/Foldable.hs#L160|анаморфизм + катаморфизм, от греч. ὑλο = материя|@fact n = product [1..n]@|
|"хрономорфизм":http://comonad.com/reader/2008/time-for-chronomorphisms/|"Chrono":http://comonad.com/haskell/category-extras/src/Control/Morphism/Chrono.hs|футуморфизм + хистоморфизм <span style="color:red;">(?)</span>||
|синхрономорфизм|"Synchro":http://comonad.com/haskell/category-extras/src/Control/Morphism/Synchro.hs|высокоуровневое преобразование между двумя структурами, которое использует третью структуру для получения промежуточных данных <span style="color:red;">(?)</span>||
|экзоморфизм|"Exo":http://comonad.com/haskell/category-extras/src/Control/Morphism/Exo.hs|высокоуровневое преобразование между структурами из триалгебры в биалгебру <span style="color:red;">(?)</span>||
|метаморфизм|"Erwig":http://comonad.com/haskell/category-extras/src/Control/Morphism/Meta/Erwig.hs|хиломорфизм, выраженный в терминах биалгебры <span style="color:red;">(?)</span>||
|"метаморфизм":http://en.wikipedia.org/wiki/Metamorphism_(computer_science)|"Gibbons":http://comonad.com/haskell/category-extras/src/Control/Morphism/Meta/Gibbons.hs|обратный хиломорфизм: катаморфизм + анаморфизм; изменение репрезентации||
|динаморфизм|"Dyna":http://comonad.com/haskell/category-extras/src/Control/Morphism/Dyna.hs|анаморфизм + хистоморфизм <span style="color:red;">(?)</span>||
|"Elgot алгебра":http://arxiv.org/abs/cs/0609040|"Elgot":https://github.com/ekmett/recursion-schemes/blob/master/Data/Functor/Foldable.hs#L423|во время fold'а может остановиться <span style="color:red;">(?)</span>||
|"Elgot коалгебра":http://comonad.com/reader/2008/elgot-coalgebras/|"CoElgot":hhttps://github.com/ekmett/recursion-schemes/blob/master/Data/Functor/Foldable.hs#L427|во время unfold'а может остановиться <span style="color:red;">(?)</span>||

Ну и легендарный "зигохистоморфный препроморфизм":http://www.haskell.org/haskellwiki/Zygohistomorphic_prepromorphisms ("код":https://github.com/ekmett/recursion-schemes/blob/master/Data/Functor/Foldable.hs#L433). Сам Кметт даёт некоторые объяснения в "этом сообщении":http://haskell.1045720.n5.nabble.com/Master-s-thesis-topic-sought-td3142012.html#a3142015.

Бонусом -- вот такая вот "диаграмма свёрток":http://cale.yi.org/share/Folds.svg.

*P.S.* В процессе написания этого поста обнаружилась вот такая вот работа: "Program Calculation Properties of Continuous Algebras":http://dl.dropbox.com/u/4274210/Books/General%20FP/CWIReport.pdf. Работа весьма хардкорная. Сам "Functional Programming with Bananas, Lenses, Envelopes and Barbed Wire" для меня очень хардкорен. Так вот, эта, судя по беглому пролистыванию, ещё более хардкорная. Будем осиливать понемногу, что делать.

*P.P.S.* Ну и вот "этот пакет":http://hackage.haskell.org/package/category-extras просто поражает воображение.
