---
layout: post
title: Ещё одно решение задачки про математиков
comments: true
is: post
categories: 
- scala
- lj
- fp
---

Задачу уже несколько раз "пережевали":http://users.livejournal.com/_darkus_/592464.html. Тем не менее, я всё же тоже выложу свой вариант, на скале, "в лоб".

<h3>Условие:</h3>

<blockquote>Встречаются два математика, не видевшиеся много лет. Расспрашивают друг друга о житии-бытии, и в ходе разговора происходит следующий разговор:

- Дети-то есть?
- Да, трое сыновей.
- И сколько же им лет?
- Ну ты же математик, попробуй сам рассчитать. Если перемножить их возрасты, то получится 36.
- Недостаточно информации.
- Сумма их возрастов равна номеру вон того троллейбуса.
- Опять недостаточно информации.
- Младший — рыжий.
- Теперь всё понятно!

Назовите возраст детей.</blockquote>

Сначала сгенерим список нужных кортежей:

{% highlight scala %}
scala> val range = (1 to 36) toList

scala> range.flatMap { x =>
     |   (x to 36).toList.map { y =>
     |     (y to 36).toList.map { z =>
     |       (x,y,z)
     |     }
     |   }
     | } flatten

res9: scala.collection.immutable.List[(Int, Int, Int)] = List((1,19,34),
(5,15,34), (12,16,18), (15,16,28), (7,35,35), (16,21,31), (7,21,33),
(10,25,33), (10,12,25), (23,27,36), (4,17,26), (6,12,36), (15,17,22),
(3,13,29), (14,31,33), (23,23,24), (31,33,34), (6,21,28), (8,17,22),
(22,22,28), (6,30,30), (19,23,33), (12,29,36), (9,33,33), (7,7,34),
(15,19,34), (9,28,35), (10,17,20), (9,11,30), (19,24,35), (1,24,31),
(4,8,27), (5,6,12), (2,8,27), (8,27,30), (4,31,33), (25,28,28),
(3,14,15), (27,27,34), (5,35,36), (16,21,34), (15,29,36), (3,29,29),
(5,24,27), (3,5,31), (2,15,22), (1,3,23), (6,13,16), (16,22,25),
(10,11,32), (6,10,35), (6,20,26), (21,25,36), (12,18,28), (7,17,25),
(15,15,19), (7,29,33), (16,16,28), (7,14,16), (26,29,34), (17,18,30),
(6,18,23), (3,26,27), (9,13,28), (2,17,30), ...

{% endhighlight %}

Первое условие -- произведение:

{% highlight scala %}
scala> res9.filter { x =>
     |   x._1*x._2*x._3 == 36
     | }

res12: scala.collection.immutable.List[(Int, Int, Int)] = List((2,2,9),
(3,3,4), (1,4,9), (1,3,12), (2,3,6), (1,2,18), (1,1,36), (1,6,6))
{% endhighlight %}

Группируем по суммам:

{% highlight scala %}
scala> res12.groupBy { x =>
     |   x._1+x._2+x._3
     | }

res13: scala.collection.immutable.Map[Int,scala.collection.immutable.List
[(Int, Int, Int)]] = Map(10 -> List((3,3,4)), 14 -> List((1,4,9)),
38 -> List((1,1,36)), 21 -> List((1,2,18)), 13 -> List((2,2,9), (1,6,6)),
16 -> List((1,3,12)), 11 -> List((2,3,6)))
{% endhighlight %}

Условие суммы оказалось недостаточным, значит номер троллейбуса -- 13:

{% highlight scala %}
scala> res13.filter { _._2.size > 1 }
res21: scala.collection.immutable.Map[Int,scala.collection.immutable.List
[(Int, Int, Int)]] = Map(13 -> List((2,2,9), (1,6,6)))

res21.values.flatten.filter { x =>
     | x._1 < x._2
     | }
res22: Iterable[(Int, Int, Int)] = List((1,6,6))
{% endhighlight %}

Правильный ответ -- <code>(1,6,6)</code>. Впрочем, если придираться, по чисто человеческим причинам второй ответ тоже проходит.

Как-то так.

**UPD:** год спустя я бы решал не намного иначе:

<iframe border='0' height='502' id='shelr_record_500ba7679660806d7c000031' scrolling='no' src='http://shelr.tv/records/500ba7679660806d7c000031/embed' style='border: 0' width='794'></iframe>
