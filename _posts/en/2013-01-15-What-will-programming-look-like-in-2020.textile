---
layout: post
title: What will programming look like in 2020 -- my personal wishlist
comments: true
is: post
categories:
- en
- functional programming
- programming
---

There's a pre-holidays thread on LtU, "What will programming look like in 2020":progin2020. Lot of great responses there. Some, that I agree with, some, that I don't. This post is my personal wishlist for what proramming could look like in 2020.

h4. Functional programming

It "is":funlangs already in the mainstream. The most used FP language in web development is functional (I'm not talking about "it's":wat "weirdness":jsweird here, ofcourse). Some great ideas finally got into mainstream programmming languages: lambdas, Algebraic Data Types. Hopefully, the expansion (anamorphism) will continue and we will see haskell, ocaml and scala it "tiobe's top 20":tiobe2012 until year 2020.

h4. Dependent types

I hope, the process of code testing will soon shift towards code verification. As described in "Unifying Programming and Math â€“ The Dependent Type Revolution":deptypes, mathematics is currently going towards programming. Hopefully, this ideas will start to shape in the programming world as well. Tools such as Agda and Coq provide a way to extract the "code":coqextraction in haskell, ocaml, scheme and even "scala":coqtoscala from the proofs. There are cases of using those tools to write real world code ("Programming a window manager with a proof assistant":xmonadincoq, here's the: "actual code":xmonadcoqcode). And an obligatory "book link":foundations.

h4. Type classes

As described in "The History of Haskell -- Beeing Lazy with Class":haskellhistory, type classes were the first experimental feature, they decided to add to the language. And it turned out to be one of the greatest. In my work I'm making use of typeclasses every day and really enjoy the way, they let you separate logic from the data type. And using scalaz-defined type classes get you tons of functions for free by defining an instance for custom type.

h4. FRP

I haven't developed any functional reactive systems, only read tutorials and played with "elm":elm. I really liked it and hope, that mainstream UI development will be utilizing this ideas in 2020. There's a "great talk":elmtalk by the elm's creator, Evan Czaplicki, on FRP and elm from the latest "Strange Loop":strangeloop conference.

h4. That's it. What would you like programming to be in 2020?

[progin2020]http://lambda-the-ultimate.org/node/4655
[jsweird]http://blog.greweb.fr/2013/01/be-careful-with-js-numbers/
[wat]https://www.destroyallsoftware.com/talks/wat
[deptypes]http://spin.atomicobject.com/2012/11/11/unifying-programming-and-math-the-dependent-type-revolution/
[coqtoscala]http://proofcafe.org/wiki/en/Coq2Scala
[xmonadincoq]http://www.staff.science.uu.nl/~swier004/Publications/XmonadInCoq.pdf
[xmonadcoqcode]https://github.com/wouter-swierstra/xmonad/
[coqextraction]http://coq.inria.fr/refman/Reference-Manual027.html
[haskellhistory]http://research.microsoft.com/en-us/um/people/simonpj/papers/history-of-haskell/index.htm
[elm]http://elm-lang.org/
[elmtalk]http://www.infoq.com/presentations/Elm
[strangeloop]https://thestrangeloop.com/news/strange-loop-2012-video-schedule
[funlangs]http://www.ioncannon.net/projects/code2012/
[tiobe2012]http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html
[foundations]http://www.cis.upenn.edu/~bcpierce/sf/
